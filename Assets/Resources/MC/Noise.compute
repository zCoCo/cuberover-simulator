
struct Crater
{
    float2 position;
    float radius;
    float verticalScale;
    float rimSharpness;
    float rimThickness;
};
RWStructuredBuffer<Crater> craters;

float Fade(float t)
{
    return t * t * t * (t * (t * 6 - 15) + 10);
}

float Lerp(float t, float a, float b)
{
    return a + t * (b - a);
}

float Grad(int hash, float x)
{
    return (hash & 1) == 0 ? x : -x;
}

float Grad(int hash, float x, float y)
{
    return ((hash & 1) == 0 ? x : -x) + ((hash & 2) == 0 ? y : -y);
}

static float Grad(int hash, float x, float y, float z)
{
    int h = hash & 15;
    float u = h < 8 ? x : y;
    float v = h < 4 ? y : (h == 12 || h == 14 ? x : z);
    return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);
}

static const int perm[257] =
{
    151, 160, 137, 91, 90, 15,
    131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,
    190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,
    88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,
    77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,
    102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,
    135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,
    5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,
    223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,
    129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,
    251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,
    49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,
    138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180,
 151
};

float Noise(float x, float y)
{
    int X = (int) floor(x) & 0xff;
    int Y = (int) floor(y) & 0xff;
    x -= floor(x);
    y -= floor(y);
    float u = Fade(x);
    float v = Fade(y);
    int A = (perm[X] + Y) & 0xff;
    int B = (perm[X + 1] + Y) & 0xff;
    return Lerp(v, Lerp(u, Grad(perm[A], x, y), Grad(perm[B], x - 1, y)),
                       Lerp(u, Grad(perm[A + 1], x, y - 1), Grad(perm[B + 1], x - 1, y - 1)));
}

float Noise(float x, float y, float z)
{
    int X = (int) floor(x) & 0xff;
    int Y = (int) floor(y) & 0xff;
    int Z = (int) floor(z) & 0xff;
    x -= floor(x);
    y -= floor(y);
    z -= floor(z);
    float u = Fade(x);
    float v = Fade(y);
    float w = Fade(z);
    int A = (perm[X] + Y) & 0xff;
    int B = (perm[X + 1] + Y) & 0xff;
    int AA = (perm[A] + Z) & 0xff;
    int BA = (perm[B] + Z) & 0xff;
    int AB = (perm[A + 1] + Z) & 0xff;
    int BB = (perm[B + 1] + Z) & 0xff;
    return Lerp(w, Lerp(v, Lerp(u, Grad(perm[AA], x, y, z), Grad(perm[BA], x - 1, y, z)),
                               Lerp(u, Grad(perm[AB], x, y - 1, z), Grad(perm[BB], x - 1, y - 1, z))),
                       Lerp(v, Lerp(u, Grad(perm[AA + 1], x, y, z - 1), Grad(perm[BA + 1], x - 1, y, z - 1)),
                               Lerp(u, Grad(perm[AB + 1], x, y - 1, z - 1), Grad(perm[BB + 1], x - 1, y - 1, z - 1))));
}

float OctavePerlinNoise(float3 location, int octaves, float persistence)
{
    float total = 0;
    float frequency = 1;
    float amplitude = 1;
    float maxValue = 0; // Used for normalizing result to 0.0 - 1.0
    for (uint i = 0; i < octaves; i++)
    {
        total += Noise(location.x * frequency, location.y * frequency, location.z * frequency) * amplitude;

        maxValue += amplitude;

        amplitude *= persistence;
        frequency *= 2;
    }

    return total / maxValue;
}

float OctavePerlinNoise(float2 location, int octaves, float persistence)
{
    float total = 0;
    float frequency = 1;
    float amplitude = 1;
    float maxValue = 0; // Used for normalizing result to 0.0 - 1.0
    for (uint i = 0; i < octaves; i++)
    {
        total += Noise(location.x * frequency, location.y * frequency) * amplitude;

        maxValue += amplitude;

        amplitude *= persistence;
        frequency *= 2;
    }
    return total / maxValue;
}


float CraterOuter(float x, float rimThickness)
{
    x = abs(x) - 1 - rimThickness;
    return x * x;
}

float CraterInner(float x)
{
    return x * x - 1;
}

float CraterFloor(float x)
{
    return x * x / 10000;
}
float mix(float x, float y, float a)
{
    return x * (1 - a) + y * a;
}

float smin(float a, float b, float k)
{
    float h = clamp(0.5 + 0.5 * (a - b) / k, 0.0, 1.0);
    return mix(a, b, h) - k * h * (1.0 - h);
}

float smax(float a, float b, float k)
{
    float h = 1 - clamp(0.5 + 0.5 * (a - b) / k, 0.0, 1.0);
    return mix(a, b, h) - k * h * (1.0 - h);
}
float CalcCrater(float x, float rimSharpness, float rimThickness)
{
    x = abs(x);
    return smax(CraterFloor(x) - 0.8, smin(CraterInner(x), CraterOuter(x, rimThickness), rimSharpness), 0);
    //return smax(craterfloor(x) - 0.8, craterinner(x), 2);
}



float4 GetNoiseData(float3 p)
{

    float4 result;
    result.xyz = p;
	
    float noiseScale = 10;
	


    result.w = p.y - OctavePerlinNoise(p.xz / noiseScale / 10, 5, .5f) * 10;
    
    for (int i = 0; i < 500; i++)
    {
        Crater crater = craters[i];
        float2 d = float2(crater.position.x - p.x, crater.position.y - p.z);
        if ((d.x * d.x + d.y * d.y) < crater.radius * crater.radius)
        {
            float r = sqrt(d.x * d.x + d.y * d.y);
            result.w = result.w - CalcCrater(r / (crater.radius / (1 + crater.rimThickness)), crater.rimSharpness, crater.rimThickness) * crater.verticalScale;
        }

    }
      
    return result;

    //result.w = p.y - OctavePerlinNoise(p.xz / noiseScale / 10, 5, .5f) * 100;
    //if (p.y < 0)
    //{
    //    //d = location.y - OctavePerlinNoise(location.xz / noiseScale / 10, 5, .3f)*8;
    //    result.w = p.y - OctavePerlinNoise(p.xz / noiseScale / 10, 5, .5f) * 10;
    //}
    


    //buffer[CoordToIndex(id.x, id.y, id.z)] = result;
}